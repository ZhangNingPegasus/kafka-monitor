<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pegasus.kafka.mapper.TopicRecordMapper">
    <update id="createTableIfNotExists">
         SET NAMES utf8mb4;
         SET FOREIGN_KEY_CHECKS = 0;

         CREATE TABLE IF NOT EXISTS `${tableName}` (
          `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主键',
          `partition_id` int(11) UNSIGNED NOT NULL COMMENT '分区号',
          `offset` bigint(20) UNSIGNED NOT NULL COMMENT '消息在该分区号下的偏移量',
          `key` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '消息键值',
          `value` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '消息体的缩微样本',
          `timestamp` datetime(0) NOT NULL COMMENT '消息时间',
          `create_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '记录创建时间',
          PRIMARY KEY (`id`) USING BTREE,
          UNIQUE INDEX `idx_topic_partition_id_offset`(`partition_id`, `offset`) USING BTREE,
          INDEX `idx_topic_key`(`key`) USING BTREE,
          INDEX `idx_topic_timestamp`(`timestamp`) USING BTREE,
          INDEX `idx_topic_create_time`(`create_time`) USING BTREE,
          INDEX `idx_topic_offset`(`offset`) USING BTREE
        ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

        SET FOREIGN_KEY_CHECKS = 1;
    </update>

    <update id="createRecordTableIfNotExists">
         SET NAMES utf8mb4;
         SET FOREIGN_KEY_CHECKS = 0;

        CREATE TABLE IF NOT EXISTS `${recordTableName}` (
          `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主键',
          `partition_id` int(11) UNSIGNED NOT NULL COMMENT '分区id号',
          `offset` bigint(20) UNSIGNED NOT NULL COMMENT '消息偏移量',
          `value` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '消息体',
          `create_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '记录创建时间',
          PRIMARY KEY (`id`) USING BTREE,
          UNIQUE INDEX `idx_topic_record_partition_id_offset`(`partition_id`, `offset`) USING BTREE
        ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

        SET FOREIGN_KEY_CHECKS = 1;
    </update>

    <delete id="dropTable">
        DROP TABLE IF EXISTS `${tableName}`;
    </delete>

    <select id="listRecords" resultType="com.pegasus.kafka.entity.dto.TopicRecord">
        SELECT
        *
        FROM `${tableName}`
        WHERE 1 = 1
        <if test="partitionId >= 0">
            AND `partition_id` = #{partitionId}
        </if>
        <if test="key != null and key != ''">
            AND `key` = #{key}
        </if>
        <if test="from != null and to !=null">
            AND `timestamp` &gt;= #{from}
            AND `timestamp` &lt;= #{to}
        </if>
        ORDER BY `timestamp` DESC, `offset` DESC
    </select>

    <select id="findRecord" resultType="com.pegasus.kafka.entity.dto.TopicRecord">
        SELECT
        *
        FROM `${tableName}`
        WHERE `partition_id` = #{partitionId}
        AND   `offset` = #{offset}
        AND   `key` = #{key}
    </select>

    <select id="findRecordValue" resultType="java.lang.String">
        SELECT
        `value`
        FROM `${tableName}`
        WHERE `partition_id` = #{partitionId}
        AND   `offset` = #{offset}
    </select>

    <select id="getRecordsCount" resultType="java.lang.Long">
        SELECT
        COUNT(1)
        FROM `${tableName}`
        WHERE 1 = 1
        <if test="from != null">
            AND `timestamp` &gt;= #{from}
        </if>
        <if test="to != null">
            AND `timestamp` &lt; #{to}
        </if>
    </select>

    <select id="listMaxOffset" resultType="com.pegasus.kafka.entity.po.MaxOffset">
    SELECT
    partition_id,
    MAX(`offset`) AS `offset`
    FROM `${tableName}`
    GROUP BY partition_id
    </select>

    <select id="getMaxCreateTime" resultType="java.util.Date">
    SELECT
    MAX(`create_time`)
    FROM `${tableName}`
    </select>

    <select id="getMaxOffset" resultType="java.lang.Long">
    SELECT
    IFNULL(MAX(`offset`), 0)
    FROM `${tableName}`
    </select>

</mapper>